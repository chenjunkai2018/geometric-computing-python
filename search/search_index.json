{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Geometry Computing with Python \u00b6 This course is based on efficient C++ libraries binded to python. The main philosophy is to use NumPy arrays as a common interface, making them highly composable with each-other as well as existing scientific computing packages. All libraries are part of conda forge . We advise to add conda forge to your conda channels: conda config --add channels conda-forge Introduction \u00b6 Many disciplines of computer science have access to high level libraries allowing researchers and engineers to quickly produce prototypes. For instance, in machine learning, one can construct complex, state-of-the-art models which run on the GPU in a few lines of Python. In the field of geometric computing, however such high-level libraries are sparse. As a result, writing prototypes in geometry is time consuming and difficult even for advanced users. In this course, we present a set of easy-to-use Python packages for applications in geometric computing. We have designed these libraries to have a shallow learning curve, while also enabling programmers to easily accomplish a wide variety of complex tasks. Furthermore, the libraries we present share NumPy arrays as a common interface, making them highly composable with each-other as well as existing scientific computing packages. Finally, our libraries are blazing fast, doing most of the heavy computations in C++ with a minimal constant-overhead interface to Python. In the course, we will present a set of real-world examples from geometry processing, physical simulation, and geometric deep learning. Each example is prototypical of a common task in research or industry and is implemented in a few lines of code. By the end of the course, attendees will have exposure to a swiss-army-knife of simple, composable, and high-performance tools for geometric computing. Libigl \u00b6 Warning Windows is currently unsupported, we expect to have it soon Libigl is a simple python and C++ geometry processing library. We have a wide functionality including construction of sparse discrete differential geometry operators and finite-elements matrices such as the cotangent Laplacian and diagonalized mass matrix, and simple facet and edge-based topology data structures. It can be easily install trough conda: conda install igl Jupiter Notebook Polyfempy \u00b6 Polyfem is a polyvalent easy to use C++ finite element library. It can be easily install trough conda: conda install polyfempy Jupiter Notebook .","title":"Home"},{"location":"#geometry-computing-with-python","text":"This course is based on efficient C++ libraries binded to python. The main philosophy is to use NumPy arrays as a common interface, making them highly composable with each-other as well as existing scientific computing packages. All libraries are part of conda forge . We advise to add conda forge to your conda channels: conda config --add channels conda-forge","title":"Geometry Computing with Python"},{"location":"#introduction","text":"Many disciplines of computer science have access to high level libraries allowing researchers and engineers to quickly produce prototypes. For instance, in machine learning, one can construct complex, state-of-the-art models which run on the GPU in a few lines of Python. In the field of geometric computing, however such high-level libraries are sparse. As a result, writing prototypes in geometry is time consuming and difficult even for advanced users. In this course, we present a set of easy-to-use Python packages for applications in geometric computing. We have designed these libraries to have a shallow learning curve, while also enabling programmers to easily accomplish a wide variety of complex tasks. Furthermore, the libraries we present share NumPy arrays as a common interface, making them highly composable with each-other as well as existing scientific computing packages. Finally, our libraries are blazing fast, doing most of the heavy computations in C++ with a minimal constant-overhead interface to Python. In the course, we will present a set of real-world examples from geometry processing, physical simulation, and geometric deep learning. Each example is prototypical of a common task in research or industry and is implemented in a few lines of code. By the end of the course, attendees will have exposure to a swiss-army-knife of simple, composable, and high-performance tools for geometric computing.","title":"Introduction"},{"location":"#libigl","text":"Warning Windows is currently unsupported, we expect to have it soon Libigl is a simple python and C++ geometry processing library. We have a wide functionality including construction of sparse discrete differential geometry operators and finite-elements matrices such as the cotangent Laplacian and diagonalized mass matrix, and simple facet and edge-based topology data structures. It can be easily install trough conda: conda install igl Jupiter Notebook","title":"Libigl"},{"location":"#polyfempy","text":"Polyfem is a polyvalent easy to use C++ finite element library. It can be easily install trough conda: conda install polyfempy Jupiter Notebook .","title":"Polyfempy"}]}